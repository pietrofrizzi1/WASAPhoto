
openapi: 3.0.3
info:
  title: WASAPhoto API
  description: |-
    Keep in touch with your friends by sharing photos of special moments, 
    thanks to WASAPhoto! You can upload your photos directly from your PC, 
    and they will be visible to everyone following you.
  version: "0.0.1"
  contact:
    name: Pietro Frizzi
    email: frizzi.2005977@studenti.uniroma1.it


tags:
  - name: "Login"
    description: "Endpoints for authentication"
  - name: "Users"
    description: "Endpoints for user actions"
  - name: "Stream"
    description: "Endpoints for stream actions"
  - name: "Photos"
    description: "Endpoints for photo actions"
  - name: "Ban"
    description: "Endpoints for ban actions"
  - name: "Follow"
    description: "Endpoints for follow actions"
  - name: "Likes"
    description: "Endpoints for like actions"
  - name: "Comments"
    description: "Endpoints for comment actions"


components:
  securitySchemes:
    userAuthorization:
      type: http
      scheme: bearer
  responses:
    BadRequest: 
      description: The back-end responds with this error code whenever the error has its origin on client side and no other HTTP status code in the 400 range is suitable
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }
    Unauthorized: 
      description: The client did not provide any authentication details for a resource requiring authentication or the provided authentication details are not correct
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }
    Forbidden: 
      description: The client did provided correct authentication details, but the privileges/permissions of the provided credentials do not allow to request the resource
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }
    InternalServerError: 
      description: The error has its origin on server side
      content:
        text/plain:
          schema: { $ref: "#/components/schemas/Error" }
  schemas:
    Error:
      description: error description
      type: string
      minLength: 0
      maxLength: 500
      readOnly: true
    likes:
      title: likes
      description: |-
        list of all the likes
      type: array
      minItems: 0
      maxItems: 20
      items:
        $ref: '#/components/schemas/user'
    comments:
      title: comment
      description: |
        a comment
      type: string
      minLength: 1
      maxLength: 500
    
    commentssection:
      title: commentsection
      type: array
      minItems: 0
      maxItems: 20
      items:
        $ref: '#/components/schemas/comments'
          
    user:
      title: username
      type: string
      minLength: 3
      maxLength: 20
      
    
    profile:
      title: profile
      description: |-
        profile structure
      type: object
      properties:
        pictures:
          $ref: '#/components/schemas/stream'
        
        numfollowers:
          $ref: '#/components/schemas/numberoffollowers'
        
        numfollowed:
          $ref: '#/components/schemas/numberoffollowed'
         
    stream:
      title: stream
      description: |-
        stream structure
      type: array
      minItems: 0
      maxItems: 20
      items:
        $ref: '#/components/schemas/post'
        
    
    post:
      title: post
      description: |
        a comment
      type: object
      properties:
        comments:
          $ref: '#/components/schemas/commentssection'
        
        photo:
          $ref: '#/components/schemas/photos'
        numlikes:
          $ref: '#/components/schemas/numberoflikes'
        numcomments:
          $ref: '#/components/schemas/numberofcomments'
        
    banned:
      title: banned
      description: |-
        list of all the banned users
      type: array
      minItems: 0
      maxItems: 20
      items:
        $ref: '#/components/schemas/user'

    bannedvalue:
      title: banned
      description: |-
        if a user is banned
      type: boolean
    
    followed:
      title: followed
      description: |-
        list of all the followed users
      type: array
      minItems: 0
      maxItems: 20
      items:
        $ref: '#/components/schemas/user'
        
    searchedusers:
      title: searchedusers
      description: |-
        list of the searched users
      type: array
      minItems: 0
      maxItems: 20
      items:
        $ref: '#/components/schemas/user'  

    photos:
      title: photo
      description: |-
        a photo
      type: string
      format: binary   

    
    commentid:
      title: commentid
      type: integer
      description: id of a comment
    
    photoid:
      title: photoid
      type: integer
      description: id of a photo
    
    numberoflikes:
      title: numberoflikes
      type: integer
      description: number of likes of a photo
    
    numberofcomments:
      title: numberofcomments
      type: integer
      description: number of comments of a photo
    
    numberoffollowers:
      title: numberoffollowers
      type: integer
      description: number of followers of a user
    
    numberoffollowed:
      title: numberoffollowed
      type: integer
      description: number of followed of a user
    
  
  
  

  
 
    
  


  parameters:
    singleusername:
     description: single user
     name: singleusername
     in: path
     required: true
     schema:
      $ref: "#/components/schemas/user"
       
       
    singlephoto:
     description: single photo
     name: singlephoto
     in: path
     required: true
     schema:
      $ref: "#/components/schemas/photoid"
    
    singlecomment:
     description: single comment
     name: singlecomment
     in: path
     required: true
     schema:
      $ref: "#/components/schemas/commentid"
    
    singlelike:
     description: single like
     name: singlelike
     in: path
     required: true
     schema:
      $ref: "#/components/schemas/user"
    
    singlebanneduser:
     description: single banned user
     name: singlebanneduser
     in: path
     required: true
     schema:
      $ref: "#/components/schemas/user"
    
    singlefolloweduser:
     description: single followed user
     name: singlefolloweduser
     in: path
     required: true
     schema:
      $ref: "#/components/schemas/user"
    
    searchedusername:
     description: the searched username
     name: searchedusername
     in: path
     required: true
     schema:
      $ref: "#/components/schemas/user"
  
  
  
paths:
    /session:
      post:
        security:
        - userAuthorization : []
        tags: ["Login"]
        summary: Log in
        description: |-
         if the user does not exist, it will be created,
         and an identifier is returned.
        operationId: doLogin
        requestBody:
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
          required: true
        responses:
          '200':
            description: User log-in action successful
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/user"
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError"}
          "401": { $ref: "#/components/responses/Unauthorized"}
          "403": { $ref: "#/components/responses/Forbidden" }
                  
                  
    
    /users/{singleusername}:
      parameters:
        - $ref: "#/components/parameters/singleusername"
      post:
        security:
        - userAuthorization : []
        tags: ["Users"]
        summary: set username
        description: set a new username
        operationId: setMyUserName
        requestBody:
          description: User username
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
          required: true
        responses:
          "200":
            description: Username set successfully.
            content:
              application/json:
                schema: 
                  $ref: "#/components/schemas/user"
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError"}
          "401": { $ref: "#/components/responses/Unauthorized"}
          "403": { $ref: "#/components/responses/Forbidden" }

    /users/{singleusername}/photos:
      parameters:
        - $ref : "#/components/parameters/singleusername"
      get: 
        security:
        - userAuthorization : []
        tags: ["Photos"]
        summary: show the photos of a user
        operationId: getPhotos
        responses:
          "200":
            description: |
              photos retrived
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/stream'
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
    
    
    
    /users/{singleusername}/photos/{singlephoto}:
      parameters:
        - $ref : "#/components/parameters/singleusername"
        - $ref : "#/components/parameters/singlephoto"
    #* uploadPhoto
      put: 
        security:
        - userAuthorization : []
        tags: ["Photos"]
        summary: upload a new photo
        operationId: uploadPhoto
        description: |-
          upload a new photo
        requestBody:
          description: a photo
          content:
            image/*:
              schema:
                $ref: "#/components/schemas/photos"
          required: true
        responses:
          "200":
            description: Photo uploaded successfully
            content:
              image/*:
                schema:
                  $ref: "#/components/schemas/photos"
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
      delete:
        security:
        - userAuthorization : []
        tags: ["Photos"]
        summary: delete a photo
        operationId: deletePhoto
        description: |-
          delete a photo
        responses:
          "204":
            description: Photo deleted successfully
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
          
    /users/{singleusername}/photos/{singlephoto}/likes:
      parameters:
        - $ref : "#/components/parameters/singleusername"
        - $ref : "#/components/parameters/singlephoto"
      get: 
        security:
        - userAuthorization : []
        tags: ["Likes"]
        summary: show the number of likes of a picture
        operationId: getLikes
        responses:
          "200":
            description: |
              likes retrived
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/numberoflikes'
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
    
    /users/{singleusername}/photos/{singlephoto}/likes/{singlelike}:
      parameters:
        - $ref : "#/components/parameters/singleusername"
        - $ref : "#/components/parameters/singlephoto"
        - $ref : "#/components/parameters/singlelike"
      put:
        security:
        - userAuthorization : []
        tags: ["Likes"]
        operationId: likePhoto
        summary: add a user to the list of likes of a picture
        description: |-
          add a user to the list of likes of a picture
        responses:
          "200":
            description: |
              like successfully added
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/likes'
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
      delete:
        security:
        - userAuthorization : []
        tags: ["Likes"]
        operationId: unlikePhoto
        summary: remove a user from the list of likes of a picture
        description: |-
          remove a user from the list of likes of a picture
        responses:
          "204":
            description: |
              like successfully removed
            
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
      
      
    /users/{singleusername}/photos/{singlephoto}/comments:
      parameters:
        - $ref : "#/components/parameters/singleusername"
        - $ref : "#/components/parameters/singlephoto"
      get: 
        security:
        - userAuthorization : []
        tags: ["Comments"]
        summary: show the comments of a picture
        operationId: getComments
        responses:
          "200":
            description: |
              comments retrived
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/commentsection'
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }


    /users/{singleusername}/photos/{singlephoto}/comments/{singlecomment}:
      parameters:
        - $ref : "#/components/parameters/singleusername"
        - $ref : "#/components/parameters/singlephoto"
        - $ref : "#/components/parameters/singlecomment"
      put:
        security:
        - userAuthorization : []
        tags: ["Comments"]
        summary: add a comment to a photo
        operationId: commentPhoto
        description: |-
          add a comment to a photo
        responses:
          "200":
            description: |
              comment successfully added
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/comments'
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
      delete:
        security:
        - userAuthorization : []
        tags: ["Comments"]
        summary: delete a comment to a photo
        operationId: uncommentPhoto
        description: |-
          delete a comment from a photo
        responses:
          "204":
            description: |
              comment successfully deleted
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
    
    
    /users/{singleusername}/banned:
      parameters:
        - $ref : "#/components/parameters/singleusername"
      get: 
        security:
        - userAuthorization : []
        tags: ["Ban"]
        summary: retrive a ban
        operationId: getBan
        responses:
          "200":
            description: |
              ban retrived
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/bannedvalue'
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }

    /users/{singleusername}/banned/{singlebanneduser}:
      parameters:
        - $ref : "#/components/parameters/singleusername"
        
        - $ref : "#/components/parameters/singlebanneduser"
      put:
        security:
        - userAuthorization : []
        tags: ["Ban"]
        summary: add a user to the list of banned users
        operationId: banUser
        description: |-
          add a user from the list of banned users
        responses:
          "200":
            description: |
              user successfully banned
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/banned'
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
      delete:
        security:
        - userAuthorization : []
        tags: ["Ban"]
        summary: remove a user from the list of banned users
        operationId: unbanUser
        description: |-
          remove a user from the list of banned users
        responses:
          "204":
            description: |
              user successfully unbanned
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
    
    
    /users/{singleusername}/followed:
      parameters:
        - $ref : "#/components/parameters/singleusername"
      get: 
        security:
        - userAuthorization : []
        tags: ["Follow"]
        summary: retrive the followers
        operationId: getFollowers
        responses:
          "200":
            description: |
              followers retrived
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/followed'
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }

    /users/{singleusername}/followed/{singlefolloweduser}:
      parameters:
        - $ref : "#/components/parameters/singleusername"
        - $ref : "#/components/parameters/singlefolloweduser"
      put:
        security:
        - userAuthorization : []
        tags: ["Follow"]
        summary: add a user to the list of followed users
        operationId: followUser
        description: |-
          add a user from the list of followed users
        responses:
          "200":
            description: |
              user successfully followed
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/followed'
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
      delete:
        security:
        - userAuthorization : []
        tags: ["Follow"]
        summary: remove a user from the list of followed users
        operationId: unfollowUser
        description: |-
          remove a user from the list of followed users
        responses:
          "204":
            description: |
              user successfully unfollowed
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
      
    
    
    
    
    
    
    
    /users/{singleusername}/profile:
      parameters:
        - $ref : "#/components/parameters/singleusername"
      get: 
        security:
        - userAuthorization : []
        tags: ["Users"]
        summary: show the profile of a user
        operationId: getUserProfile
        responses:
          "200":
            description: |
              profile retrived
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/profile'
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
    
    
    
    
    
    
    
    /users/{singleusername}/stream:
      parameters:
        - $ref : "#/components/parameters/singleusername"
      get: 
        security:
        - userAuthorization : []
        tags: ["Stream"]
        summary: show the stream
        operationId: getMyStream
        description: |-
          get the user's stream
        
        responses: 
          "200":
            description: |
              stream retrived
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/stream'
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }
    

    /users/{singleusername}/search/{searchedusername}:
      parameters:
        - $ref : "#/components/parameters/singleusername"
        - $ref : "#/components/parameters/searchedusername"
      get: 
        security:
        - userAuthorization : []
        tags: ["Users"]
        summary: retrive users with a similar username
        operationId: searchUsers
        responses:
          "200":
            description: |
              users retrived
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/searchedusers'
          "400": { $ref: "#/components/responses/BadRequest" }
          "500": { $ref: "#/components/responses/InternalServerError" }
          "401": { $ref: "#/components/responses/Unauthorized" }
          "403": { $ref: "#/components/responses/Forbidden" }


